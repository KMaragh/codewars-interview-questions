Problem:

Define a function that takes in two non-negative integers aaa and bbb and returns the last decimal digit of aba^ba 
b
 . Note that aaa and bbb may be very large!

For example, the last decimal digit of 979^79 
7
  is 999, since 97=47829699^7 = 47829699 
7
 =4782969. The last decimal digit of (2200)2300({2^{200}})^{2^{300}}(2 
200
 ) 
2 
300
 
 , which has over 109210^{92}10 
92
  decimal digits, is 666. Also, please take 000^00 
0
  to be 111.

You may assume that the input will always be valid.

Examples
lastDigit(4, 1)                # returns 4
lastDigit(4, 2)                # returns 6
lastDigit(9, 7)                # returns 9
lastDigit(10, 10 ** 10)        # returns 0
lastDigit(2 ** 200, 2 ** 300)  # returns 6
Remarks
JavaScript, C++, R, PureScript
Since these languages don't have native arbitrarily large integers, your arguments are going to be strings representing non-negative integers instead.


Solution:

import java.math.BigInteger;
fun lastDigit(base: BigInteger, exponent: BigInteger): Int {
    return 0 
}

Test:

mport kotlin.test.assertEquals
import org.junit.Test
import java.math.BigInteger;

class TestExample {
  @Test
  fun `Basic Tests`() {
    assertEquals(4, lastDigit(BigInteger("4"), BigInteger("1")))
    assertEquals(6, lastDigit(BigInteger("4"), BigInteger("2")))
    assertEquals(9, lastDigit(BigInteger("9"), BigInteger("7")))
    assertEquals(0, lastDigit(BigInteger("10"), BigInteger("10000000000")))
    assertEquals(1, lastDigit(BigInteger("10"), BigInteger("0")))
    assertEquals(1, lastDigit(BigInteger("9435756757744477447576867898089079079808908347583277453475"), BigInteger("0")))
    assertEquals(6, lastDigit(BigInteger("1606938044258990275541962092341162602522202993782792835301376"), BigInteger("2037035976334486086268445688409378161051468393665936250636140449354381299763336706183397376")))
    assertEquals(7, lastDigit(BigInteger("3715290469715693021198967285016729344580685479654510946723"), BigInteger("68819615221552997273737174557165657483427362207517952651")))
  }
}    
