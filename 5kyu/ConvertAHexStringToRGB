Problem:

When working with color values it can sometimes be useful to extract the individual red, green, and blue (RGB) component values for a color. Implement a function that meets these requirements:

Accepts a case-insensitive hexadecimal color string as its parameter (ex. "#FF9933" or "#ff9933")
Returns a Map<String, int> with the structure {r: 255, g: 153, b: 51} where r, g, and b range from 0 through 255
Note: your implementation does not need to support the shorthand form of hexadecimal notation (ie "#FFF")

Example
"#FF9933" --> {r: 255, g: 153, b: 51}



Solution:

fun hexStringToRGB(hexString: String): RGB {
  val (red, green, blue) = hexString.drop(1).chunked(2).map { it.toInt(16) }
  return RGB(red, green, blue)
}

Test:

import kotlin.test.assertEquals
import org.junit.Test
class TestExample {
  @Test
  fun testFixed() {
    assertEquals(RGB(r = 255, g = 153, b = 51), hexStringToRGB("#FF9933"))
    assertEquals(RGB(r = 190, g = 173, b = 237), hexStringToRGB("#beaded"))
    assertEquals(RGB(r = 0, g = 0, b = 0), hexStringToRGB("#000000"))
    assertEquals(RGB(r = 17, g = 17, b = 17), hexStringToRGB("#111111"))
    assertEquals(RGB(r = 250, g = 52, b = 86), hexStringToRGB("#Fa3456"))
  }
}


