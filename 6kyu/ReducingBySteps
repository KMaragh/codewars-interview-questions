Problem:
Data: an array of integers, a function f of two variables and an init value.

Example: a = [2, 4, 6, 8, 10, 20], f(x, y) = x + y; init = 0

Output: an array of integers, say r, such that

r = [r[0] = f(init, a[0]), r[1] = f(r[0], a[1]), r[2] = f(r[1], a[2]), ...]

With our example: r = [2, 6, 12, 20, 30, 50]

Task:
Write the following functions of two variables

som : (x, y) -> x + y
mini : (x, y) -> min(x, y)
maxi : (x, y) -> max(x, y)
lcmu : (x, y) -> lcm(abs(x), abs(y) (see note for lcm)
gcdi : (x, y) -> gcd(abs(x), abs(y) (see note for gcd)
and

function oper_array(fct, arr, init) (or operArray or oper-array) where

fct is the function of two variables to apply to the array arr (fct will be one of som, mini, maxi, lcmu or gcdi)

init is the initial value

Examples:
a = [18, 69, -90, -78, 65, 40]
oper_array(gcd, a, a[0]) => [18, 3, 3, 3, 1, 1]
oper_array(lcm, a, a[0]) => [18, 414, 2070, 26910, 26910, 107640]
oper_array(sum, a, 0) => [18, 87, -3, -81, -16, 24]
oper_array(min, a, a[0]) => [18, 18, -90, -90, -90, -90]
oper_array(max, a, a[0]) => [18, 69, 69, 69, 69, 69]
Notes:
The form of the parameter fct in oper_array (or operArray or oper-array) changes according to the language. You can see each form according to the language in "Your test cases".

AFAIK there are no corner cases, everything is as nice as possible.

lcm and gcd see: https://en.wikipedia.org/wiki/Least_common_multiple https://en.wikipedia.org/wiki/Greatest_common_divisor

you could google "reduce function (your language)" to have a general view about the reduce functions.

In Shell bash, arrays are replaced by strings.

In OCaml arrays are replaced by lists.


Solution:

package operarray
import java.util.function.LongBinaryOperator
import kotlin.math.abs


fun gcdi(a:Long, b:Long):Long {
    return if (b == 0L) abs(a) else gcdi(b, a % b)
}
fun lcmu(a:Long, b:Long):Long {
    return abs(a * b) / gcdi(a, b)
}
fun som(a:Long, b:Long):Long {
  return a + b
}
fun maxi(a:Long, b:Long):Long {
  return Math.max(a,b)
}
fun mini(a:Long, b:Long):Long {
  return Math.min(a,b)
}

fun operArray( lcb: LongBinaryOperator, arr:LongArray, initial:Long):LongArray {
    val answerArray = LongArray(arr.size)
    
    for(index in answerArray.indices){
        val currentValue = if(index == 0) initial else answerArray[index - 1]
        val newValue = lcb.applyAsLong(currentValue, arr[index])
        answerArray.set(index, newValue)
    }
    return answerArray
}

Test:
package operarray

import org.junit.Assert.*
import java.util.Arrays
import java.util.function.LongBinaryOperator
import org.junit.Test

class OperarrayTest {
  
  private fun testing(actual:String, expected:String) {
    assertEquals(expected, actual)
  }
  @Test
  fun test0() {
    println("Fixed Tests operArray : gcdi, lcmu, som, mini, maxi")
    val a = longArrayOf(18, 69, -90, -78, 65, 40)
    var r = longArrayOf(18, 3, 3, 3, 1, 1)
    testing(Arrays.toString(operArray(LongBinaryOperator({ x, y -> gcdi(x, y) }), a, a[0])),
            Arrays.toString(r))
    r = longArrayOf(18, 414, 2070, 26910, 26910, 107640)
    testing(Arrays.toString(operArray(LongBinaryOperator({ a, b -> lcmu(a, b) }), a, a[0])),
            Arrays.toString(r))
    r = longArrayOf(18, 87, -3, -81, -16, 24)
    testing(Arrays.toString(operArray(LongBinaryOperator({ a, b -> som(a, b) }), a, 0)),
            Arrays.toString(r))
    r = longArrayOf(18, 18, -90, -90, -90, -90)
    testing(Arrays.toString(operArray(LongBinaryOperator({ a, b -> mini(a, b) }), a, a[0])),
            Arrays.toString(r))
    r = longArrayOf(18, 69, 69, 69, 69, 69)
    testing(Arrays.toString(operArray(LongBinaryOperator({ a, b -> maxi(a, b) }), a, a[0])),
            Arrays.toString(r))
  }

}
