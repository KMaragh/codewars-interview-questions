Problem:

The input is a string str of digits. Cut the string into chunks (a chunk here is a substring of the initial string) of size sz (ignore the last chunk if its size is less than sz).

If a chunk represents an integer such as the sum of the cubes of its digits is divisible by 2, reverse that chunk; otherwise rotate it to the left by one position. Put together these modified chunks and return the result as a string.

If

sz is <= 0 or if str is empty return ""
sz is greater (>) than the length of str it is impossible to take a chunk of size sz hence return "".
Examples:
revrot("123456987654", 6) --> "234561876549"
revrot("123456987653", 6) --> "234561356789"
revrot("66443875", 4) --> "44668753"
revrot("66443875", 8) --> "64438756"
revrot("664438769", 8) --> "67834466"
revrot("123456779", 8) --> "23456771"
revrot("", 8) --> ""
revrot("123456779", 0) --> "" 
revrot("563000655734469485", 4) --> "0365065073456944"
Example of a string rotated to the left by one position:
s = "123456" gives "234561".



Solution:



Test:

package revrot

import org.junit.Assert.*
import org.junit.Test
import kotlin.test.assertEquals

class revrotMainTest {
  private fun testing(actual:String, expected:String) {
      assertEquals(expected, actual)
    }
  @Test
  fun test1() {
    println("Fixed Tests: revRot")
    var s = "733049910872815764"
    testing(revRot(s, 5), "330479108928157")
    s = "73304991087281576455176044327690580265896"
    testing(revRot(s, 8), "1994033775182780067155464327690480265895")
    s = "73304991087281576455176044327690580265896896028"
    testing(revRot(s, 8), "1994033775182780067155464327690480265895")
    
  }

