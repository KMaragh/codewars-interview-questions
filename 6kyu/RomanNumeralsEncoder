Problem:

Create a function taking a positive integer as its parameter and returning a string containing the Roman Numeral representation of that integer.

Modern Roman numerals are written by expressing each digit separately starting with the left most digit and skipping any digit with a value of zero. In Roman numerals 1990 is rendered: 1000=M, 900=CM, 90=XC; resulting in MCMXC. 2008 is written as 2000=MM, 8=VIII; or MMVIII. 1666 uses each Roman symbol in descending order: MDCLXVI.

Example:

encode(1000) // should return "M"
Help:

Symbol    Value
I          1
V          5
X          10
L          50
C          100
D          500
M          1,000
Remember that there can't be more than 3 identical symbols in a row.

More about roman numerals - http://en.wikipedia.org/wiki/Roman_numerals


Solution:

package romannumerals

fun encode(num: Int) : String = generateSequence(getHighestRomanSymbol(num)) { if (it.first > 0) getHighestRomanSymbol(it.first) else null }
    .map { it.second }
    .joinToString("")

fun getHighestRomanSymbol(num: Int): Pair<Int, String> {
    
    return if(num - 1000 >= 0){
        Pair(num - 1000, "M")
    } else if(num - 900 >= 0){
        Pair(num - 900, "CM")
    } else if(num - 500 >= 0){
        Pair(num - 500, "D")
    } else if(num - 400 >= 0){
        Pair(num - 400, "CD")
    } else if(num - 100 >= 0){
        Pair(num - 100, "C")
    } else if(num - 90 >= 0){
        Pair(num - 90, "XC")
    } else if(num - 50 >= 0){
        Pair(num - 50, "L")
    } else if(num - 40 >= 0){
        Pair(num - 40, "XL")
    } else if(num - 10 >= 0){
        Pair(num - 10, "X")
    } else if(num - 9 >= 0){
        Pair(num - 9, "IX")
    } else if(num - 5 >= 0){
        Pair(num - 5, "V")
    } else if(num - 4 >= 0){
        Pair(num - 4, "IV")
    } else if(num - 1 >= 0){
        Pair(num - 1, "I") 
    } else {
        Pair(num, "")
    }
   
}


Test:

package romannumerals

import kotlin.test.assertEquals
import org.junit.Test

class TestEncode {
    @Test
    fun basic() {
        assertEquals("", encode(0))
        assertEquals("I", encode(1))
        assertEquals("XXI", encode(21))
        assertEquals("MMVIII", encode(2008))
        assertEquals("MDCLXVI", encode(1666))
    }
}

