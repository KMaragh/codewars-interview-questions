Problem:

Longest Common Subsequence (Performance version)
from Wikipedia:
The longest common subsequence (LCS) problem is the problem of finding the longest subsequence common to all sequences in a set of sequences.
It differs from problems of finding common substrings: unlike substrings, subsequences are not required to occupy consecutive positions within the original sequences.

Task
Write a function lcs that accepts two strings and returns their longest common subsequence as a string. Performance matters.

Examples
lcs( "abcdef", "abc" ) => "abc"
lcs( "abcdef", "acf" ) => "acf"
lcs( "132535365", "123456789" ) => "12356"
lcs( "abcdefghijklmnopq", "apcdefghijklmnobq" ) => "acdefghijklmnoq"
Testing
This is a performance version of xDranik's kata of the same name.
This kata, however, has much more full and heavy testing. Intermediate random tests have string arguments of 20 characters; hard random tests 40 characters; extreme 60 characters (characters are chosen out of 36 different ones).

Notes
The subsequences of "abc" are "", "a", "b", "c", "ab", "ac", "bc", "abc".
"" is a valid subsequence in this kata, and a possible return value.
All inputs will be valid.
Two strings may have more than one longest common subsequence. When this occurs, return any of them.

lcs( string0, string1 ) === lcs( string1, string0 )
Wikipedia has an article that may be helpful.

Solution:


fun lcs(a: String, b: String): String {
  
    if(a.length == 0 || b.length == 0) return ""
    
    if(a.get(a.length - 1) == b.get(b.length - 1)) return lcs(a.dropLast(1), b.dropLast(1)) + a.get(a.length - 1)
    
    val first = lcs(a,b.dropLast(1))
    val second = lcs(a.dropLast(1), b)
    
    return if(first.length > second.length) first else second
}


Test:

import org.junit.Test

import java.util.Arrays
import java.util.Random

import org.junit.Assert.*

class LcsTest {

	@Test
	fun fixedTests() {
		assertEquals("", lcs("", ""))
		assertEquals("", lcs("abc", ""))
		assertEquals("", lcs("", "abc"))
		assertEquals("", lcs("a", "b"))
		assertEquals("a", lcs("a", "a"))
		assertEquals("ac", lcs("abc", "ac"))
		assertEquals("abc", lcs("abcdef", "abc"))
		assertEquals("acf", lcs("abcdef", "acf"))
		assertEquals("nottest", lcs("anothertest", "notatest"))
		assertEquals("12356", lcs("132535365", "123456789"))
		assertEquals("final", lcs("nothardlythefinaltest", "zzzfinallyzzz"))
		assertEquals("acdefghijklmnoq", lcs("abcdefghijklmnopq", "apcdefghijklmnobq"))
	}

}
